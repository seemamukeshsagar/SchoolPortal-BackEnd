// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using SchoolPortal.Shared.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace SchoolPortal.Shared.Models
{
    public partial class SchoolNewPortalContext
    {
        private ISchoolNewPortalContextProcedures _procedures;

        public virtual ISchoolNewPortalContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new SchoolNewPortalContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ISchoolNewPortalContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class SchoolNewPortalContextProcedures : ISchoolNewPortalContextProcedures
    {
        private readonly SchoolNewPortalContext _context;

        public SchoolNewPortalContextProcedures(SchoolNewPortalContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetSundaysbyyearandmonthResult>> GetSundaysbyyearandmonthAsync(string year, string month, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "year",
                    Size = 10,
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "month",
                    Size = 10,
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSundaysbyyearandmonthResult>("EXEC @returnValue = [dbo].[GetSundaysbyyearandmonth] @year = @year, @month = @month", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_CommitToHistoryEmpAttendanceDataResult>> usp_CommitToHistoryEmpAttendanceDataAsync(int? month, int? year, string attendanceShift, int? companyID, int? schoolID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AttendanceShift",
                    Size = 10,
                    Value = attendanceShift ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_CommitToHistoryEmpAttendanceDataResult>("EXEC @returnValue = [dbo].[usp_CommitToHistoryEmpAttendanceData] @Month = @Month, @Year = @Year, @AttendanceShift = @AttendanceShift, @CompanyID = @CompanyID, @SchoolID = @SchoolID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_CommitToHistoryEmpSalaryDataResult>> usp_CommitToHistoryEmpSalaryDataAsync(int? month, int? year, int? empDeptID, int? companyID, int? schoolID, string session, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmpDeptID",
                    Value = empDeptID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Session",
                    Size = 50,
                    Value = session ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_CommitToHistoryEmpSalaryDataResult>("EXEC @returnValue = [dbo].[usp_CommitToHistoryEmpSalaryData] @Month = @Month, @Year = @Year, @EmpDeptID = @EmpDeptID, @CompanyID = @CompanyID, @SchoolID = @SchoolID, @Session = @Session", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_DeleteEmpAttendanceDataResult>> usp_DeleteEmpAttendanceDataAsync(int? month, int? year, string attendanceShift, int? companyID, int? schoolID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AttendanceShift",
                    Size = 10,
                    Value = attendanceShift ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_DeleteEmpAttendanceDataResult>("EXEC @returnValue = [dbo].[usp_DeleteEmpAttendanceData] @Month = @Month, @Year = @Year, @AttendanceShift = @AttendanceShift, @CompanyID = @CompanyID, @SchoolID = @SchoolID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_DisplayEmpSalaryDataResult>> usp_DisplayEmpSalaryDataAsync(int? month, int? year, int? empDeptID, int? companyID, int? schoolID, string session, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmpDeptID",
                    Value = empDeptID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Session",
                    Size = 50,
                    Value = session ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_DisplayEmpSalaryDataResult>("EXEC @returnValue = [dbo].[usp_DisplayEmpSalaryData] @Month = @Month, @Year = @Year, @EmpDeptID = @EmpDeptID, @CompanyID = @CompanyID, @SchoolID = @SchoolID, @Session = @Session", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_DisplayEmpSalaryHistoryDataResult>> usp_DisplayEmpSalaryHistoryDataAsync(int? month, int? year, int? empDeptID, int? companyID, int? schoolID, string session, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmpDeptID",
                    Value = empDeptID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Session",
                    Size = 50,
                    Value = session ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_DisplayEmpSalaryHistoryDataResult>("EXEC @returnValue = [dbo].[usp_DisplayEmpSalaryHistoryData] @Month = @Month, @Year = @Year, @EmpDeptID = @EmpDeptID, @CompanyID = @CompanyID, @SchoolID = @SchoolID, @Session = @Session", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_GenerateEmpSalaryDataResult>> usp_GenerateEmpSalaryDataAsync(int? month, int? year, int? empDeptID, int? companyID, int? schoolID, string session, DateTime? batchPrintDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmpDeptID",
                    Value = empDeptID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Session",
                    Size = 50,
                    Value = session ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BatchPrintDate",
                    Value = batchPrintDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_GenerateEmpSalaryDataResult>("EXEC @returnValue = [dbo].[usp_GenerateEmpSalaryData] @Month = @Month, @Year = @Year, @EmpDeptID = @EmpDeptID, @CompanyID = @CompanyID, @SchoolID = @SchoolID, @Session = @Session, @BatchPrintDate = @BatchPrintDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_GenerateEmpSalaryStrucDataResult>> usp_GenerateEmpSalaryStrucDataAsync(int? companyID, int? schoolID, string session, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Session",
                    Size = 50,
                    Value = session ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_GenerateEmpSalaryStrucDataResult>("EXEC @returnValue = [dbo].[usp_GenerateEmpSalaryStrucData] @CompanyID = @CompanyID, @SchoolID = @SchoolID, @Session = @Session", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_getClassSectionTimeTableHistoryDataResult>> usp_getClassSectionTimeTableHistoryDataAsync(int? sessionID, int? classID, int? secId, int? companyID, int? schoolID, string sessionYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Value = sessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClassID",
                    Value = classID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SecId",
                    Value = secId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SessionYear",
                    Size = 50,
                    Value = sessionYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_getClassSectionTimeTableHistoryDataResult>("EXEC @returnValue = [dbo].[usp_getClassSectionTimeTableHistoryData] @SessionID = @SessionID, @ClassID = @ClassID, @SecId = @SecId, @CompanyID = @CompanyID, @SchoolID = @SchoolID, @SessionYear = @SessionYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_getClassSectionTimeTableHistoryRecordsResult>> usp_getClassSectionTimeTableHistoryRecordsAsync(int? sessionID, int? classID, int? secId, int? companyID, int? schoolID, string sessionYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Value = sessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClassID",
                    Value = classID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SecId",
                    Value = secId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SessionYear",
                    Size = 50,
                    Value = sessionYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_getClassSectionTimeTableHistoryRecordsResult>("EXEC @returnValue = [dbo].[usp_getClassSectionTimeTableHistoryRecords] @SessionID = @SessionID, @ClassID = @ClassID, @SecId = @SecId, @CompanyID = @CompanyID, @SchoolID = @SchoolID, @SessionYear = @SessionYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_getEmpAttendanceDetailsResult>> usp_getEmpAttendanceDetailsAsync(int? month, int? year, string attendanceShift, int? companyID, int? schoolID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AttendanceShift",
                    Size = 10,
                    Value = attendanceShift ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_getEmpAttendanceDetailsResult>("EXEC @returnValue = [dbo].[usp_getEmpAttendanceDetails] @Month = @Month, @Year = @Year, @AttendanceShift = @AttendanceShift, @CompanyID = @CompanyID, @SchoolID = @SchoolID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_getEmpAttendanceDetailsHistoryResult>> usp_getEmpAttendanceDetailsHistoryAsync(int? month, int? year, string attendanceShift, int? companyID, int? schoolID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AttendanceShift",
                    Size = 10,
                    Value = attendanceShift ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_getEmpAttendanceDetailsHistoryResult>("EXEC @returnValue = [dbo].[usp_getEmpAttendanceDetailsHistory] @Month = @Month, @Year = @Year, @AttendanceShift = @AttendanceShift, @CompanyID = @CompanyID, @SchoolID = @SchoolID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_getEmpAttendanceRecordsResult>> usp_getEmpAttendanceRecordsAsync(int? month, int? year, string attendanceShift, int? companyID, int? schoolID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AttendanceShift",
                    Size = 10,
                    Value = attendanceShift ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_getEmpAttendanceRecordsResult>("EXEC @returnValue = [dbo].[usp_getEmpAttendanceRecords] @Month = @Month, @Year = @Year, @AttendanceShift = @AttendanceShift, @CompanyID = @CompanyID, @SchoolID = @SchoolID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_getEmpAttendanceRecordsHistoryResult>> usp_getEmpAttendanceRecordsHistoryAsync(int? month, int? year, string attendanceShift, int? companyID, int? schoolID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AttendanceShift",
                    Size = 10,
                    Value = attendanceShift ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_getEmpAttendanceRecordsHistoryResult>("EXEC @returnValue = [dbo].[usp_getEmpAttendanceRecordsHistory] @Month = @Month, @Year = @Year, @AttendanceShift = @AttendanceShift, @CompanyID = @CompanyID, @SchoolID = @SchoolID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_getReportCardCommentsResult>> usp_getReportCardCommentsAsync(string reportCardIDs, int? classId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReportCardIDs",
                    Size = -1,
                    Value = reportCardIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ClassId",
                    Value = classId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_getReportCardCommentsResult>("EXEC @returnValue = [dbo].[usp_getReportCardComments] @ReportCardIDs = @ReportCardIDs, @ClassId = @ClassId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_getReportCardCommentsHistoryResult>> usp_getReportCardCommentsHistoryAsync(string reportCardIDs, int? classId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReportCardIDs",
                    Size = -1,
                    Value = reportCardIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ClassId",
                    Value = classId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_getReportCardCommentsHistoryResult>("EXEC @returnValue = [dbo].[usp_getReportCardCommentsHistory] @ReportCardIDs = @ReportCardIDs, @ClassId = @ClassId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_GetStudentFeesReceiptDetailsResult>> usp_GetStudentFeesReceiptDetailsAsync(string stuGuid, int? classId, int? sectionID, int? feesMonth, int? feesYear, int? companyID, int? schoolID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StuGuid",
                    Size = 50,
                    Value = stuGuid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ClassId",
                    Value = classId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SectionID",
                    Value = sectionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FeesMonth",
                    Value = feesMonth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FeesYear",
                    Value = feesYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_GetStudentFeesReceiptDetailsResult>("EXEC @returnValue = [dbo].[usp_GetStudentFeesReceiptDetails] @StuGuid = @StuGuid, @ClassId = @ClassId, @SectionID = @SectionID, @FeesMonth = @FeesMonth, @FeesYear = @FeesYear, @CompanyID = @CompanyID, @SchoolID = @SchoolID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_getTeacherTimeTableHistoryDataResult>> usp_getTeacherTimeTableHistoryDataAsync(int? sessionID, int? teacherID, int? companyID, int? schoolID, string sessionYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Value = sessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TeacherID",
                    Value = teacherID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SessionYear",
                    Size = 50,
                    Value = sessionYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_getTeacherTimeTableHistoryDataResult>("EXEC @returnValue = [dbo].[usp_getTeacherTimeTableHistoryData] @SessionID = @SessionID, @TeacherID = @TeacherID, @CompanyID = @CompanyID, @SchoolID = @SchoolID, @SessionYear = @SessionYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_getTeacherTimeTableHistoryRecordsResult>> usp_getTeacherTimeTableHistoryRecordsAsync(int? sessionID, int? teacherID, int? companyID, int? schoolID, string sessionYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Value = sessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TeacherID",
                    Value = teacherID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolID",
                    Value = schoolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SessionYear",
                    Size = 50,
                    Value = sessionYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_getTeacherTimeTableHistoryRecordsResult>("EXEC @returnValue = [dbo].[usp_getTeacherTimeTableHistoryRecords] @SessionID = @SessionID, @TeacherID = @TeacherID, @CompanyID = @CompanyID, @SchoolID = @SchoolID, @SessionYear = @SessionYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_select_SMSTaskScheduleResult>> usp_select_SMSTaskScheduleAsync(int? day, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "day",
                    Value = day ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_select_SMSTaskScheduleResult>("EXEC @returnValue = [dbo].[usp_select_SMSTaskSchedule] @day = @day", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
